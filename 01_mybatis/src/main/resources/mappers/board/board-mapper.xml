<?xml version="1.0" encoding="UTF-8"?>
<!-- mybatis mapper 설정 파일임을 선언한다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="boardMapper">
	<sql id="boardListSql">
		SELECT  B.NO,
				B.TITLE,
				M.ID,
				B.READCOUNT,
				B.ORIGINAL_FILENAME,
				B.RENAMED_FILENAME,
				B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS = 'Y'
	</sql>
	
	<resultMap type="Board" id="boardListResultMap">
		<id property="no" column="NO"/>
		<result property="title" column="TITLE"/>
		<result property="writerId" column="ID"/>
		<result property="readCount" column="READCOUNT"/>
		<result property="originalFileName" column="ORIGINAL_FILENAME"/>
		<result property="renamedFileName" column="RENAMED_FILENAME"/>
		<result property="createDate" column="CREATE_DATE"/>
	</resultMap>
	
	<!-- 게시글 상세 조회(댓글 포함) -->
	<!-- 1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법 -->
	<resultMap type="Board" id="boardDetailResultMap" extends="boardListResultMap">
		<result property="content" column="CONTENT"/>
		<result property="type" column="TYPE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<collection property="replies" javaType="arraylist" select="selectRepliesByNo" column="NO"/>
	</resultMap>
	
	<resultMap type="Reply" id="replyResultMap">
		<id property="no" column="NO"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="writerId" column="ID"/>
		<result property="content" column="CONTENT"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>

	<!-- 게시글 목록 조회(전체 목록) -->
	<select id="selectBoardCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD WHERE STATUS='Y'
	</select>
	
	<select id="selectAll" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		ORDER BY B.NO DESC
	</select>

	<!-- 게시글 목록 조회(전체 목록) -->
	<select id="selectBoardCountByKeyWord" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS='Y'
		<if test="writer != null">
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>
		ORDER BY B.NO DESC	
	</select>
	
	<!-- 게시글 목록 조회(검색 기능 적용) -->
	<select id="selectBoardListByKeyWord" resultMap="boardListResultMap">
		<!--
			1. 다중 <if>를 활용한 검색 기능 구현 
		<include refid="boardListSql"/>

		<if test="writer != null">
			AND M.ID LIKE '%' || #{writer} || '%'
		</if>
		<if test="title != null">
			AND B.TITLE LIKE '%' || #{title} || '%'
		</if>
		<if test="content != null">
			AND B.CONTENT LIKE '%' || #{content} || '%'
		</if>
		ORDER BY B.NO DESC	
		 -->
		 
		 <!-- 
		 	2. <choose>를 활용한 검색 기능 구현
 		<include refid="boardListSql"/>
 		<choose>
 			<when test="writer != null">
 				AND M.ID LIKE '%' || #{writer} || '%'
 			</when>
 			<when test="title != null">
 				AND B.TITLE LIKE '%' || #{title} || '%'
 			</when>
 			<when test="content != null">
 				AND B.CONTENT LIKE '%' || #{content} || '%'
 			</when>
 			<otherwise>
				위의 조건 중 하나라도 만족하지 앟는 경우 포함될 쿼리문 작성
 			</otherwise>
 		</choose>
 		ORDER BY B.NO DESC	
		-->
		
		<!-- 
			3. <where>와 다중 <if>를 활용한 검색 기능 구현
		SELECT  B.NO,
				B.TITLE,
				M.ID,
				B.READCOUNT,
				B.ORIGINAL_FILENAME,
				B.RENAMED_FILENAME,
				B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		<where>
			<if test="writer != null">
			 	M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</where>
 		ORDER BY B.NO DESC	
		-->
		
		<!-- 
			4. <trim>과 다중 <if> 요소를 활용한 검색 기능 구현
		 -->
 		SELECT  B.NO,
				B.TITLE,
				M.ID,
				B.READCOUNT,
				B.ORIGINAL_FILENAME,
				B.RENAMED_FILENAME,
				B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="writer != null">
			 	M.ID LIKE '%' || #{writer} || '%'
			</if>
			<if test="title != null">
				AND B.TITLE LIKE '%' || #{title} || '%'
			</if>
			<if test="content != null">
				AND B.CONTENT LIKE '%' || #{content} || '%'
			</if>
			AND B.STATUS = 'Y'
		</trim>
 		ORDER BY B.NO DESC	
	</select>

	<!-- 게시글 목록 조회(필터 기능 적용) -->
	<select id="selectBoardCountByFilters" resultType="_int">
	      SELECT COUNT(*) 
	      FROM BOARD 
	      WHERE STATUS='Y'
	      <if test="filters != null">
	         AND TYPE IN
	         <foreach collection="filters" item="filter" open="(" separator="," close=")">
	             #{filter}
	         </foreach>
	      </if>
   </select>
	
	<select id="selectBoardListByFilters" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		<if test="filters != null">
	 		<!-- 
	 			AND B.TYPE IN ('B2', 'B3')
	 			
	 			위 쿼리문을 만들기 위해서 foreach 요소를 사용한다.
	 		 -->
			AND B.TYPE IN
			<!-- <foreach collection="array" item="filter" open="(" separator="," close=")"> -->
			<!-- <foreach collection="list" item="filter" open="(" separator="," close=")"> -->
			<foreach collection="filters" item="filter" open="(" separator="," close=")">
				#{filter}
			</foreach>
		</if>
 		ORDER BY B.NO DESC	
	</select>

	<!-- 게시글 상세 조회(댓글 포함) -->
	<!-- 1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법 -->
	<select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">
		SELECT  B.NO, 
				B.TITLE, 
				M.ID, 
				B.READCOUNT, 
				B.ORIGINAL_FILENAME, 
				B.RENAMED_FILENAME, 
				B.CONTENT, 
				B.TYPE,
				B.CREATE_DATE, 
				B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS = 'Y' AND B.NO=#{no}
	</select>
	
	<select id="selectRepliesByNo" parameterType="_int" resultMap="replyResultMap">
		SELECT R.NO, 
			   R.BOARD_NO, 
			   R.CONTENT, 
			   M.ID, 
			   R.CREATE_DATE, 
			   R.MODIFY_DATE
		FROM REPLY R
		JOIN MEMBER M ON(R.WRITER_NO = M.NO)
		WHERE R.STATUS='Y' AND BOARD_NO=${no}
		ORDER BY R.NO DESC
	
	</select>
	
	<!-- 2. 하나의 쿼리문을 만들어서 하나의 ResultMap에서 매핑하는 방법 -->










</mapper>